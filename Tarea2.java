/* Tarea2.java */
/* Generated By:JavaCC: Do not edit this line. Tarea2.java */
class Tarea2 implements Tarea2Constants {
        public static void main(String args[]) throws ParseException {
                Tarea2 resolucion = new Tarea2(System.in);
                try {
                        resolucion.inicio();
                        System.out.println("Correcto");
                }catch(Exception ex) {
                        System.out.println("Error: " + ex);
                }
        }

/* Especificación sintáctica */
  static final public 
void inicio() throws ParseException {
    listaSentencias();
    jj_consume_token(0);
  }

  static final public void listaSentencias() throws ParseException {
    sentencia();
    jj_consume_token(PUNTO_Y_COMA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONJUNTO:
    case IMPRIME:
    case ELIMINA:
    case ID:{
      listaSentencias();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  static final public void sentencia() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONJUNTO:{
      jj_consume_token(CONJUNTO);
      listaVariablesCreadas();
      break;
      }
    case IMPRIME:{
      jj_consume_token(IMPRIME);
      jj_consume_token(ID);
      break;
      }
    case ELIMINA:{
      jj_consume_token(ELIMINA);
      listaID();
      break;
      }
    case ID:{
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASIGNACION:{
        jj_consume_token(ASIGNACION);
        expresionAAsignar();
        break;
        }
      case OP_MAS:
      case OP_MENOS:{
        operaciones();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void listaVariablesCreadas() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASIGNACION:{
      jj_consume_token(ASIGNACION);
      conjuntoDetallado();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      listaVariablesCreadas();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  static final public void conjuntoDetallado() throws ParseException {
    jj_consume_token(LLAVE_IZQ);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      listaNumeros();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(LLAVE_DER);
  }

  static final public void listaNumeros() throws ParseException {
    jj_consume_token(NUM);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      listaNumeros();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void listaID() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      listaID();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void expresionAAsignar() throws ParseException {
    unConjunto();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OP_MAS:
    case OP_PRODUCTO:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OP_MAS:{
        jj_consume_token(OP_MAS);
        break;
        }
      case OP_PRODUCTO:{
        jj_consume_token(OP_PRODUCTO);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      unConjunto();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  static final public void unConjunto() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      break;
      }
    case LLAVE_IZQ:{
      conjuntoDetallado();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void operaciones() throws ParseException {
    operacion();
    jj_consume_token(NUM);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OP_MAS:
    case OP_MENOS:{
      operaciones();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void operacion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OP_MAS:{
      jj_consume_token(OP_MAS);
      break;
      }
    case OP_MENOS:{
      jj_consume_token(OP_MENOS);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Tarea2TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x5c0,0x38000,0x5c0,0x8000,0x2000,0x20,0x2000,0x2000,0x50000,0x50000,0xc00,0x30000,0x30000,};
   }

  /** Constructor with InputStream. */
  public Tarea2(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Tarea2(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Tarea2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Tarea2(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Tarea2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Tarea2(Tarea2TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Tarea2TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
